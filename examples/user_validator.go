// Code generated by VGen. DO NOT EDIT.

package main

import (
	"fmt"
	"regexp"
)

// isEmailValid checks if the email is valid (simple regex).
var emailRegex = regexp.MustCompile(`^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`)

func isEmailValid(e string) bool {
	return emailRegex.MatchString(e)
}


// Validate checks the fields of User and returns all validation errors.
func (s *User) Validate() error {
	var errs []error // 用于累积错误

	
	
	if s.Name == "" { errs = append(errs, fmt.Errorf("field %s is required", "Name")) }
	
	if len(s.Name) < 2 { errs = append(errs, fmt.Errorf("field %s length must be at least %d, got %d", "Name", 2, len(s.Name))) }
	
	if len(s.Name) > 50 { errs = append(errs, fmt.Errorf("field %s length must be at most %d, got %d", "Name", 50, len(s.Name))) }
	
	
	
	if s.Email == "" { errs = append(errs, fmt.Errorf("field %s is required", "Email")) }
	
	if !isEmailValid(s.Email) { errs = append(errs, fmt.Errorf("field %s is not a valid email", "Email")) }
	
	
	
	if s.Age == 0 { errs = append(errs, fmt.Errorf("field %s is required", "Age")) }
	
	if s.Age < 0 { errs = append(errs, fmt.Errorf("field %s must be at least %d, got %d", "Age", 0, s.Age)) }
	
	if s.Age > 150 { errs = append(errs, fmt.Errorf("field %s must be at most %d, got %d", "Age", 150, s.Age)) }
	
	
	
	if len(s.City) != 5 { errs = append(errs, fmt.Errorf("field %s length must be %d, got %d", "City", 5, len(s.City))) }
	
	
	
	
{
	allowedValues := map[string]bool{"active": true,}
	if !allowedValues[s.Status] {
		errs = append(errs, fmt.Errorf("field %s value '%s' is not in the allowed list [%s]", "Status", s.Status, "active"))
	}
}
	
	// TODO: Implement validation for rule 'pending'
	
	// TODO: Implement validation for rule 'disabled'
	
	

	// 如果有错误，则返回它们
	if len(errs) > 0 {
		// 这里简单地返回第一个错误。更复杂的实现可以格式化所有错误。
		// 例如，可以返回 fmt.Errorf("validation failed: %v", errs)
		// 或者定义一个包含 []error 的自定义错误类型。
		return errs[0] 
	}
	return nil
}

